* Introduction
This repository contains the analysis on multiplicity estimators done in the HMTF for the ALICE experiment. The choice of the multiplicity estimator has significant impact on observables later retrieved based on multiplicity selections. In order to better to better understand these biases, various observables are extracted from MC truth data using various estimators.

* Estimators 

* Running the analysis 
The analysis is structured in two parts. The first one uses the AliRoot framework to loop over the given events and creates basic histograms. The second part of the analysis (post-analysis) is implemented in pyroot. It extracts the desired observables from the previously created histograms and creates the appropriate plots to display them.
** Dependencies
As mentioned, the first part of the analysis is implemented in the standard AliRoot framework and has no further dependencies. The post-analysis is implemented in pyroot (included in the standard ROOT distribution) but also uses rootpy ([[http://www.rootpy.org/][link]]) for convenience sake. This dependency can removed if necessary. For the time being, the following is a short instruction on how to set up rootpy:
Python development should best be done in virtual environments. Thus, virtualenv and virtualenvwrapper should be installed from the distributions repositories. Then, something like:
#+begin_src sh
  $ mkvirtualenv hmtf
  $ workon hmtf
  $ mkdir hmtf
  $ cd hmtf
  $ git clone https://github.com/rootpy/rootpy
  $ cd rootpy
  $ pip install ./
#+end_src
should set up rootpy.
** Really running the analysis
The analysis is set up to run with the runTrain facility ([[http://hehi00.nbi.dk:8888/pwglfforward/train_setup_doc.html][link]]) in order to avoid having to maintain individual scripts for local or proof deployment. The analysis is easiest run by just executing the script `run.sh`. Namely:
#+begin_src sh
  $ ./run.sh local [OPTIONS]
  $ ./run.sh lite [OPTIONS]
  $ ./run.sh proof [OPTIONS]
#+end_src

Available options can be found with `--help`. Eg.:
#+begin_src sh
  $ ./run.sh local --help
  + runTrain --class=HMTFMCTrain --name=local --type=ESD --url=local:///home/hehi/cbourjau/phd/service_task/input?mc&pattern=galice.root&recursive#TE --help
  Warning in <TUnixSystem::SetDisplay>: DISPLAY not set, setting it to top.nbi.dk:0.0
  Usage: runTrain --class=CLASS --name=NAME --url=URI [OPTIONS]

  runTrain specific options:
    --class=CLASS                    Train class
    --name=NAME                      Name of train
    --include=DIRECTORY              Append dir to macro/header path
    --define=DEFINE                  Set a preprocessor macro
    --batch                          Batch mode
    --spawn                          Spawn interactive ROOT shell
  Error in <TGClient::TGClient>: only one instance of TGClient allowed


  Train Options:
    --branches                    Load only requested branches [false]
    --date=YYYY-MM-DD HH:MM       Set date [now]
    --events=N                    Number of events to analyse [-1]
    --help                        Show help [true]
    --overwrite                   Allow overwrite [false]
    --ps=MODE                     Physics selection mode []
    --setup                       Only do the setup [false]
    --tender=WHICH                Specify tender supplies []
    --type=ESD|AOD|USER           Input data stype [ESD]
    --url=URL                     Job location & input URL [local:///home/hehi/cbourjau/phd/service_task/input?mc&pattern=galice.root&recursive#TE]
    --verbose=LEVEL               Set verbosity level [0]
    --version                     Print version and exit [false]

  Local URL form:

      local://<datadir or list>[?<options>][#<treeName>]

  Options:
      clean           Clean chain elements [false]
      mc              Assume simulation input [true]
      pattern=GLOB    File name pattern [galice.root]
      recursive       Scan recursive [true]
      scan            Scan for number of events in chain [false]
      trackref        For MC input, check TrackRef.root presence [false]

#+end_src
** Running the post analysis
If rootpy is installed running the postanalysis should be as easy as:
#+begin_src sh
  $ python post.py ./lite/MC_estimators.root
#+end_src

The results of the post analysis are saved in the same file but in the "folder" `results_post`
